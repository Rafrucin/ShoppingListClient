@page "/order"
@inject IProductServices services
@inject IHelpers helper
<h3>Create Shopping List</h3>

@if (cart == null)
{
<p>Loading...</p>
}

else { 

<EditForm Model="@product" OnValidSubmit="AddProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label class="ml-1">Product<InputText class="ml-1" id="prodName" @bind-Value="product.Name" /></label>

    <label class="ml-1">Quantity<InputNumber class="ml-1" id="q" @bind-Value="product.Quantity" /></label>

    <label class="ml-1">
        Department
        <InputSelect @bind-Value="product.Department">
            @foreach (var department in Enum.GetValues(typeof(StoreDepartments)))
            {
                <option value="@department">@department</option>
            }
        </InputSelect>
    </label>
    <button type="submit" class="btn btn-block btn-success">
    @if (selectedProduct.Name == null)
    {
            @submitString 
    }
    else { @updateString 
    }</button>
</EditForm>


<table class="table">
    <thead>
        <tr>
            <td class="ml-1">Product</td>
            <td class="ml-1 text-center">Quantity</td>
            <td class="ml-1">Department</td>
            <td class="ml-1">Select</td>
            <td class="ml-1">Remove</td>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in cart)
        {
            @if (item.Current && !item.IsDone)
            {
            <tr>
                <td>
                    @item.Name
                </td>
                <td class="text-center">
                    @item.Quantity
                </td>
                <td>
                    @item.Department
                </td>
                <td>
                    <button class="btn btn-sm btn-outline-primary" @onclick="()=> SelectProduct(item)">Update</button>
                </td>
                <td>
                    <button class="btn btn-sm btn-outline-danger" @onclick="async ()=>await RemoveFromList(item)">Remove</button>
                </td>
            </tr>
            }
        }      
    </tbody>
</table>
}

@code {
    public List<ProductModel> cart { get; set; }
    private ProductModel product = new ProductModel();
    protected async override Task OnInitializedAsync()
    {
        cart = await services.GetAllProducts();
        SortList();
    }

    ProductModel selectedProduct = new ProductModel();
    string submitString = "Submit";
    string updateString = "";

    async Task RemoveFromList(ProductModel model)
    {
        model.Current = false;
        await services.UpdateProduct(model);
    }

    private void SelectProduct( ProductModel item)
    {
        if (item==selectedProduct)
        {
            product = new ProductModel();
            selectedProduct = new ProductModel();
        }
        else
        {
            selectedProduct = item;
            product.Name = selectedProduct.Name;
            product.Quantity = selectedProduct.Quantity;
            product.Department = selectedProduct.Department;
            updateString = $"Update {item.Name}";
        }
    }

    private void SortList()
    {
        cart = cart.OrderBy(o => o.Name).ToList();
    }

    private async Task AddProduct()
    {

        await helper.AddProductAsync(product, cart, selectedProduct);
        cart = await services.GetAllProducts();
        SortList();
        product = new ProductModel();
        selectedProduct = new ProductModel();
    }


    //todo select/update item
    // todo bulkAdd
    // todo to in shop view
    // todo sort by dept
    // todo auth
    // todo many users

}
