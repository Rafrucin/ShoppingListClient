@page "/order"
@inject IProductServices services
@inject IHelpers helper
<h3>Create Shopping List</h3>

@if (cart == null)
{
    <p>Loading...</p>
}

else
{

<EditForm Model="@product" OnValidSubmit="AddProduct" class="form-group">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label class="col-form-label col-form-label-sm">Product<InputText class="ml-1" id="prodName" @bind-Value="product.Name" /></label>

    <label class="col-form-label col-form-label-sm">Quantity<InputNumber class="ml-1" id="q" @bind-Value="product.Quantity" /></label>

    <label class="col-form-label col-form-label-sm">
        Department
        <InputSelect @bind-Value="product.Department">
            @foreach (var department in Enum.GetValues(typeof(StoreDepartments)))
                {
                <option value="@department">@department</option>
                }
        </InputSelect>
    </label>
    @if (selectedProduct.Name != null)
    {
        <div class="row m-1">
            <div class="col-6">
                <button type="submit" class="btn btn-sm btn-block btn-success">
                    @updateString
                </button>
            </div>
            <div class="col-6">
                <button class="btn btn-block btn-sm btn-danger" @onclick="async ()=>await RemoveFromList(selectedProduct)">
                    @removeString
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="row m-1">
            <button type="submit" class="btn btn-sm btn-block btn-success">
                @submitString
            </button>
        </div> 
    }
        
    </EditForm>


    <table class="table table-sm pt-1">
        <thead>
            <tr class="bg-light">
                <td class="ml-1"><strong>Product</strong></td>
                <td class="ml-1 text-center"><strong>Quantity</strong></td>
                <td class="ml-1"><strong>Department</strong></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cart)
            {
                @if (item.Current && !item.IsDone)
                {
                    @if (item == selectedProduct) { selectRow = "table-info"; } else { selectRow = ""; }
                    <tr @onclick="()=> SelectProduct(item)" style="cursor: pointer" class="@selectRow">
                        <td>
                            @item.Name
                        </td>
                        <td class="text-center">
                            @item.Quantity
                        </td>
                        <td>
                            @item.Department
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    public List<ProductModel> cart { get; set; }
    private ProductModel product = new ProductModel();
    protected async override Task OnInitializedAsync()
    {
        cart = await services.GetAllProducts();
        SortList();
    }
    ProductModel selectedProduct = new ProductModel();
    string submitString = "Submit";
    string updateString = "";
    string removeString = string.Empty;
    string selectRow = "";

    async Task RemoveFromList(ProductModel model)
    {
        model.Current = false;
        await services.UpdateProduct(model);
        selectedProduct = new ProductModel();
        product = new ProductModel();
    }

    private void SelectProduct(ProductModel item)
    {
        if (item == selectedProduct)
        {
            product = new ProductModel();
            selectedProduct = new ProductModel();
        }
        else
        {
            selectedProduct = item;
            product.Name = selectedProduct.Name;
            product.Quantity = selectedProduct.Quantity;
            product.Department = selectedProduct.Department;
            updateString = $"Update {item.Name}";
            removeString = $"Remove {item.Name}";
        }
    }

    private void SortList()
    {
        cart = cart.OrderBy(o => o.Name).ToList();
    }

    private async Task AddProduct()
    {
        //TextInfo ti = CultureInfo.CurrentCulture.TextInfo;
        //product.Name = ti.ToTitleCase(product.Name);
        await helper.AddProductAsync(product, cart, selectedProduct);
        cart = await services.GetAllProducts();
        SortList();
        product = new ProductModel();
        selectedProduct = new ProductModel();
    }


    //todo select/update item
    // todo bulkAdd
    // todo to in shop view
    // todo sort by dept
    // todo auth
    // todo many users

}
